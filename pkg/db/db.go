// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createHistoryStmt, err = db.PrepareContext(ctx, CreateHistory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateHistory: %w", err)
	}
	if q.createRuleStmt, err = db.PrepareContext(ctx, CreateRule); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRule: %w", err)
	}
	if q.deleteRuleStmt, err = db.PrepareContext(ctx, DeleteRule); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRule: %w", err)
	}
	if q.listAllHistoryStmt, err = db.PrepareContext(ctx, ListAllHistory); err != nil {
		return nil, fmt.Errorf("error preparing query ListAllHistory: %w", err)
	}
	if q.listAllRulesStmt, err = db.PrepareContext(ctx, ListAllRules); err != nil {
		return nil, fmt.Errorf("error preparing query ListAllRules: %w", err)
	}
	if q.truncateRulesStmt, err = db.PrepareContext(ctx, TruncateRules); err != nil {
		return nil, fmt.Errorf("error preparing query TruncateRules: %w", err)
	}
	if q.updateRuleStmt, err = db.PrepareContext(ctx, UpdateRule); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRule: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createHistoryStmt != nil {
		if cerr := q.createHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createHistoryStmt: %w", cerr)
		}
	}
	if q.createRuleStmt != nil {
		if cerr := q.createRuleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRuleStmt: %w", cerr)
		}
	}
	if q.deleteRuleStmt != nil {
		if cerr := q.deleteRuleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRuleStmt: %w", cerr)
		}
	}
	if q.listAllHistoryStmt != nil {
		if cerr := q.listAllHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAllHistoryStmt: %w", cerr)
		}
	}
	if q.listAllRulesStmt != nil {
		if cerr := q.listAllRulesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAllRulesStmt: %w", cerr)
		}
	}
	if q.truncateRulesStmt != nil {
		if cerr := q.truncateRulesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing truncateRulesStmt: %w", cerr)
		}
	}
	if q.updateRuleStmt != nil {
		if cerr := q.updateRuleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRuleStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                 DBTX
	tx                 *sql.Tx
	createHistoryStmt  *sql.Stmt
	createRuleStmt     *sql.Stmt
	deleteRuleStmt     *sql.Stmt
	listAllHistoryStmt *sql.Stmt
	listAllRulesStmt   *sql.Stmt
	truncateRulesStmt  *sql.Stmt
	updateRuleStmt     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                 tx,
		tx:                 tx,
		createHistoryStmt:  q.createHistoryStmt,
		createRuleStmt:     q.createRuleStmt,
		deleteRuleStmt:     q.deleteRuleStmt,
		listAllHistoryStmt: q.listAllHistoryStmt,
		listAllRulesStmt:   q.listAllRulesStmt,
		truncateRulesStmt:  q.truncateRulesStmt,
		updateRuleStmt:     q.updateRuleStmt,
	}
}
