// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const CreateHistory = `-- name: CreateHistory :execresult
INSERT INTO history (eventID, Object, AlarmCategory, AckMessage)
VALUES (?, ?, ?, ?)
`

type CreateHistoryParams struct {
	Eventid       sql.NullString `json:"eventid"`
	Object        string         `json:"object"`
	Alarmcategory string         `json:"alarmcategory"`
	Ackmessage    sql.NullString `json:"ackmessage"`
}

func (q *Queries) CreateHistory(ctx context.Context, arg CreateHistoryParams) (sql.Result, error) {
	return q.exec(ctx, q.createHistoryStmt, CreateHistory,
		arg.Eventid,
		arg.Object,
		arg.Alarmcategory,
		arg.Ackmessage,
	)
}

const CreateRule = `-- name: CreateRule :execresult
INSERT INTO rules (object, AlarmCategoryOrder, AlarmLogic, TriggerValue, AlarmCategory, AlamrMessage)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateRuleParams struct {
	Object             string `json:"object"`
	Alarmcategoryorder int32  `json:"alarmcategoryorder"`
	Alarmlogic         string `json:"alarmlogic"`
	Triggervalue       string `json:"triggervalue"`
	Alarmcategory      string `json:"alarmcategory"`
	Alamrmessage       string `json:"alamrmessage"`
}

func (q *Queries) CreateRule(ctx context.Context, arg CreateRuleParams) (sql.Result, error) {
	return q.exec(ctx, q.createRuleStmt, CreateRule,
		arg.Object,
		arg.Alarmcategoryorder,
		arg.Alarmlogic,
		arg.Triggervalue,
		arg.Alarmcategory,
		arg.Alamrmessage,
	)
}

const DeleteRule = `-- name: DeleteRule :exec
DELETE
FROM rules
WHERE id = ?
`

func (q *Queries) DeleteRule(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteRuleStmt, DeleteRule, id)
	return err
}

const ListAllHistory = `-- name: ListAllHistory :many
SELECT id, eventid, object, alarmcategory, ackmessage, created_at
FROM history
where created_at>=? and created_at<?
`

type ListAllHistoryParams struct {
	CreatedAt   time.Time `json:"created_at"`
	CreatedAt_2 time.Time `json:"created_at_2"`
}

func (q *Queries) ListAllHistory(ctx context.Context, arg ListAllHistoryParams) ([]History, error) {
	rows, err := q.query(ctx, q.listAllHistoryStmt, ListAllHistory, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []History
	for rows.Next() {
		var i History
		if err := rows.Scan(
			&i.ID,
			&i.Eventid,
			&i.Object,
			&i.Alarmcategory,
			&i.Ackmessage,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListAllRules = `-- name: ListAllRules :many
SELECT id, object, alarmcategoryorder, alarmlogic, triggervalue, alarmcategory, alamrmessage, created_at
FROM rules
`

func (q *Queries) ListAllRules(ctx context.Context) ([]Rule, error) {
	rows, err := q.query(ctx, q.listAllRulesStmt, ListAllRules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rule
	for rows.Next() {
		var i Rule
		if err := rows.Scan(
			&i.ID,
			&i.Object,
			&i.Alarmcategoryorder,
			&i.Alarmlogic,
			&i.Triggervalue,
			&i.Alarmcategory,
			&i.Alamrmessage,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const TruncateRules = `-- name: TruncateRules :exec
TRUNCATE rules
`

func (q *Queries) TruncateRules(ctx context.Context) error {
	_, err := q.exec(ctx, q.truncateRulesStmt, TruncateRules)
	return err
}

const UpdateRule = `-- name: UpdateRule :exec
UPDATE rules
set AlarmCategoryOrder=?, 
    AlarmLogic=?, 
    TriggerValue=?,
    AlarmCategory=?,
    AlamrMessage=?,
    created_at=?
WHERE id = ?
`

type UpdateRuleParams struct {
	Alarmcategoryorder int32     `json:"alarmcategoryorder"`
	Alarmlogic         string    `json:"alarmlogic"`
	Triggervalue       string    `json:"triggervalue"`
	Alarmcategory      string    `json:"alarmcategory"`
	Alamrmessage       string    `json:"alamrmessage"`
	CreatedAt          time.Time `json:"created_at"`
	ID                 int32     `json:"id"`
}

func (q *Queries) UpdateRule(ctx context.Context, arg UpdateRuleParams) error {
	_, err := q.exec(ctx, q.updateRuleStmt, UpdateRule,
		arg.Alarmcategoryorder,
		arg.Alarmlogic,
		arg.Triggervalue,
		arg.Alarmcategory,
		arg.Alamrmessage,
		arg.CreatedAt,
		arg.ID,
	)
	return err
}
